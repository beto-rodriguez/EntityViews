namespace EntityViews.SourceGenerators.Templates;

public class AttributesTemplate
{
    public static string Build()
    {
        return @"// <auto-generated />
#nullable enable

namespace EntityViews.Attributes;

/// <summary>
/// Creates a ViewModel based on the given type.
/// </summary>
public class ViewModelAttribute() : Attribute
{
    /// <summary>
    /// Gets or sets the base type.
    /// </summary>
    public Type BaseType { get; set; } = typeof(object);

    /// <summary>
    /// Gets the ignorable properties.
    /// </summary>
    public string[] Ignore { get; set; } = [];

    /// <summary>
    /// Gets or sets the forms generation mode.
    /// </summary>
    public int Form { get; set; } = 0;
}

/// <summary>
/// Defines the input type to use for the specified property.
/// </summary>
public class FormInput() : Attribute
{
    /// <summary>
    /// Gets or sets the name of the property.
    /// </summary>
    public string PropertyName { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the input type to use.
    /// </summary>
    public string InputType { get; set; } = string.Empty;
}

/// <summary>
/// Marks a property as ignorable, it will not be included in the generated ViewModel.
/// </summary>
public class IgnorePropertyAttribute : Attribute
{ }

/// <summary>
/// Indicates that the marked class is the display control, the display control is used to display the property name.
/// </summary>
public class DisplayControlAttribute : Attribute
{ }

/// <summary>
/// Indicates that the marked class is the text control, the text control is where the user enters the property value.
/// </summary>
public class TextControlAttribute : Attribute
{ }

/// <summary>
/// Indicates that the marked class is the validation control, the validation control is where validation errors are shown.
/// </summary>
public class ValidationControlAttribute : Attribute
{ }

/// <summary>
/// Indicates that the marked property is the actual control to use. The containing class must be marked with
/// <see cref=""DisplayControlAttribute""/>, <see cref=""TextControlAttribute""/> or <see cref=""ValidationControlAttribute""/>,
/// then the marked property will behave as the main control of the class.
/// </summary>
public class ControlPropertyAttribute : TextControlAttribute
{ }

/// <summary>
/// Defines the event arguments for the Validating event.
/// </summary>
/// <param name=""propertyName""></param>
public class ValidatingEventArgs(string? propertyName)
{
    /// <summary>
    /// Gets the name of the property being validated, null if the entire view model is being validated.
    /// </summary>
    public string? PropertyName { get; } = propertyName;
}

/// <summary>
/// Defines the special validation cases handled by the EntityViews library.
/// </summary>
public static class SpecialValidationMessages
{
    /// <summary>
    /// Gets or sets the message for numeric inputs.
    /// </summary>
    public static string ValidNumber { get; set; } = ""'{0}' is not a valid number"";
}

/// <summary>
/// Defines the forms generation mode.
/// </summary>
public static class FormKind
{
    /// <summary>
    /// No forms will be generated.
    /// </summary>
    public const int None = 0;

    /// <summary>
    /// Uses CommunityToolkit.Maui.Markup compiled bindings to generate the forms,
    /// CommunityToolkit.Maui.Markup must be installed manually.
    /// </summary>
    public const int MauiMarkup = 1;
}

/// <summary>
/// Defines the input types to use in the forms.
/// </summary>
public static class InputTypes
{
    /// <summary>
    /// The default input type based on the property type.
    /// </summary>
    public const string Default = ""default"";
    public const string Text = ""text"";
    public const string TextArea = ""text-area"";
    public const string Number = ""number"";
    public const string Switch = ""switch"";
    public const string Checkbox = ""checkbox"";
    public const string DateTime = ""datetime"";
    public const string TimeSpan = ""timespan"";
    public const string Slider = ""slider"";
    public const string Stepper = ""stepper"";
}
";
    }
}
