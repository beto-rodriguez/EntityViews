namespace EntityViews.SourceGenerators.Templates.Input;

public class MauiNumericEntryPropertyTemplate
{
    public static string Build(InputTemplateParams p)
    {
        var property = p.Property;
        var viewModelName = p.ViewModelName;
        var viewModelNamespace = p.ViewModelNamespace;
        var formNamespace = p.FormNamespace;
        var propertyDisplaySource = p.PropertyDisplaySource;

        return @$"// <auto-generated/>
#nullable enable

using CommunityToolkit.Maui.Markup;
using {viewModelNamespace};

namespace {formNamespace};

public class {property.Name}Input : StackLayout
{{
    private readonly Entry _input;
    private {viewModelName}? _subscribedTo;

    public {property.Name}Input()
    {{
        var label = new Label().Text({propertyDisplaySource});

        _input = new Entry()
            .Bind(
                Entry.TextProperty,
                getter: static ({viewModelName} vm) => vm.{property.Name},
                setter: static ({viewModelName} vm, {property.Type.Name} value) => vm.{property.Name} = value);
        _input.Triggers.Add(
            new DataTrigger(typeof(Entry))
            {{
                Binding = new Binding(""{property.Name}HasError""),
                Value = true,
                Setters = {{ new Setter {{ Property = BackgroundColorProperty, Value = Colors.Red }} }},
            }});
        async Task<bool> UserKeepsTyping()
        {{
            var txt = _input.Text;
            await Task.Delay(500);
            return txt != _input.Text;
        }}
        _input.TextChanged += async (_, _) =>
        {{
            if (await UserKeepsTyping()) return;
            (({viewModelName})BindingContext).ValidateDirtyProperty(
                ""{property.Name}"", _input.Text is not null && _input.Text.Length > 0);
        }};
        BindingContextChanged += (_, _) => Subscribe();
        Subscribe();

        var validationLabel = new Label()
            .Bind(
                Label.TextProperty,
                getter: static ({viewModelName} vm) => vm.{property.Name}Error);

        Children.Add(label);
        Children.Add(_input);
        Children.Add(validationLabel);
    }}

    private void Subscribe()
    {{
        var vm = BindingContext as {viewModelName};

        var vmChanged = _subscribedTo != vm;
        if (!vmChanged) return;

        if (_subscribedTo is not null)
            _subscribedTo.Validating -= OnValidating;

        if (vm is not null)
            vm.Validating += OnValidating;

        _subscribedTo = vm;
    }}

    private void OnValidating({viewModelName} vm, EntityViews.Attributes.ValidatingEventArgs args)
    {{
        if (args.PropertyName is not null && args.PropertyName != ""{property.Name}"") return;
        if (string.IsNullOrWhiteSpace(_input.Text)) return;
        if (!{property.Type.Name}.TryParse(_input.Text, out _))
            vm.AddValidationError(
                ""{property.Name}"",
                string.Format(
                    EntityViews.Attributes.SpecialValidationMessages.ValidNumber, _input.Text, ""{property.Name}""));
    }}
}}
";
    }
}
