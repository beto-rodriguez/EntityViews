namespace EntityViews.SourceGenerators.Templates.Maui;

public class MauiNumericEntryPropertyTemplate
{
    public static string Build(InputTemplateParams p)
    {
        var property = p.Property;
        var viewModelName = p.ViewModelName;
        var viewModelNamespace = p.ViewModelNamespace;
        var formNamespace = p.FormNamespace;
        var propertyDisplaySource = p.PropertyDisplaySource;

        return @$"// <auto-generated/>
#nullable enable

using CommunityToolkit.Maui.Markup;
using EntityViews.Validation;
using {viewModelNamespace};

namespace {formNamespace};

public class {property.Name}Input : {p.BaseControlClassName ?? "EntityViews.Input.EntityViewsNumberInput"}
{{
    private {viewModelName}? _subscribedTo;

    public {property.Name}Input()
    {{
        Input.BackgroundColor = Colors.Transparent;

        Input
            .Bind(
                Entry.TextProperty,
                getter: static ({viewModelName} vm) => vm.{property.Name},
                setter: static ({viewModelName} vm, {property.Type.Name} value) => vm.{property.Name} = value);

        async Task<bool> UserKeepsTyping()
        {{
            var txt = Input.Text;
            await Task.Delay(500);
            return txt != Input.Text;
        }}
        Input.TextChanged += async (_, _) =>
        {{
            if (await UserKeepsTyping()) return;
            (({viewModelName})BindingContext).ValidateDirtyProperty(
                ""{property.Name}"", Input.Text is not null && Input.Text.Length > 0);
        }};

        Input.Keyboard = Keyboard.Numeric;

        var auto = AbsoluteLayout.AutoSize;

        Input.Focused += (s, e) =>
        {{
            Transform(
                true,
                new(0, 0, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize),
                .7,
                new(5, 0),
                new(0.5f, 1, 1, HighlightBorderHeight));
        }};
        Input.Unfocused += (s, e) =>
        {{
            Transform(
                string.IsNullOrWhiteSpace(Input.Text),
                new(0, 0.5, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize),
                1,
                new(0),
                new(0.5f, 1, 0, HighlightBorderHeight));
        }};

        Initialized(""{property.Name}"", {propertyDisplaySource});
    }}

    protected override void OnValidating(ValidableViewModel vm, ValidatingEventArgs args)
    {{
        if (Input is null) return;
        if (args.PropertyName is not null && args.PropertyName != _propertyName) return;
        if (string.IsNullOrWhiteSpace(Input.Text)) return;
        if (!{property.Type.Name}.TryParse(Input.Text, out _))
            vm.AddValidationError(
                ""{property.Name}"",
                string.Format(SpecialValidationMessages.ValidNumber, Input.Text, ""{property.Name}""));

        base.OnValidating(vm, args);
    }}
}}
";
    }
}
