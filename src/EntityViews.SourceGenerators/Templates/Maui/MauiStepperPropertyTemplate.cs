namespace EntityViews.SourceGenerators.Templates.Maui;

public class MauiStepperPropertyTemplate
{
    public static string Build(InputTemplateParams p)
    {
        var property = p.Property;
        var viewModelName = p.ViewModelName;
        var viewModelNamespace = p.ViewModelNamespace;
        var formNamespace = p.FormNamespace;
        var propertyDisplaySource = p.PropertyDisplaySource;

        return @$"// <auto-generated/>
#nullable enable

using CommunityToolkit.Maui.Markup;
using {viewModelNamespace};

namespace {formNamespace};

public class {property.Name}Input : {p.BaseControlClassName ?? "EntityViews.Input.EntityViewsStepperInput"}
{{
    public {property.Name}Input()
    {{
        Input
            .Bind(
                Stepper.ValueProperty,
                getter: static ({viewModelName} vm) => vm.{property.Name},
                setter: static ({viewModelName} vm, {property.Type.Name} value) => vm.{property.Name} = value);

        Input.Margin = new(7, 20, 7, 0);
        Input.MinimumHeightRequest = 30;
        Input.HeightRequest = 30;
        InputBackgroundColor = Colors.Transparent;

        Initialized(""{property.Name}"", {propertyDisplaySource});
    }}

    public override void Initialized(string propertyName, string? displayName)
    {{
        base.Initialized(propertyName, displayName);

        Transform(
            true,
            new(0, 0, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize),
            .7,
            new(5, 0),
            new(0.5f, 1, 0, HighlightBorderHeight),
            1);

        Input.ValueChanged += (_, _) => _label.Text = $""{{displayName}} {{Input.Value}}"";
    }}
}}
";
    }
}
