namespace EntityViews.SourceGenerators.Templates.Maui;

public class _MauiDefaultInputs
{
    public static string OnErrorBackgroundColor = "Color.FromRgba(255, 0, 0, 50)";
    public static string OnErrorTextColor = "Color.FromRgba(255, 0, 0, 255)";

    public static string Build()
    {
        return @$"// <auto-generated/>
#nullable enable

namespace EntityViews.Input;

/// <summary>
/// Indicates that the marked class is a control for EntityViews.
/// </summary>
public class EntityViewsControlAttribute : Attribute
{{ }}

/// <summary>
/// Defines a control for EntityViews.
/// </summary>
public interface IEntityViewsInput<T>
{{
    /// <summary>
    /// Gets the EntityViews input type.
    /// </summary>
    string InputType {{ get; }}

    /// <summary>
    /// Gets the label to display the property name.
    /// </summary>
    Label Label {{ get; }}

    /// <summary>
    /// Gets the input to bind to the property value.
    /// </summary>
    T Input {{ get; }}

    /// <summary>
    /// Gets the label to display validation errors.
    /// </summary>
    Label ValidationLabel {{ get; }}
}}

// The interface implementation is irrelevant in this case,
// the source generator will use the properties defined in this interface,
// but it only uses the property names as strings.
// this is just an example of how the interface could be implemented
// (please do not use the base ctor as in this example, instead set the InputType property explicitly as the docs state).
public abstract class EntityViewsInput<T> : VerticalStackLayout, IEntityViewsInput<T>
    where T : View, new()
{{
    public EntityViewsInput(string inputType)
    {{
        InputType = inputType ?? EntityViews.Attributes.InputTypes.Default;

        var label = new Label();
        var input = new T();
        var validationLabel = new Label();

        Children.Add(label);
        Children.Add(input);
        Children.Add(validationLabel);

        Label = label;
        Input = input;
        ValidationLabel = validationLabel;
    }}

    public string InputType {{ get; }}

    public Label Label {{ get; }}

    public T Input {{ get; }}

    public Label ValidationLabel {{ get; }}
}}

public class EntityViewsTextInput : EntityViewsInput<Entry>
{{
    public EntityViewsTextInput() : base(EntityViews.Attributes.InputTypes.Text) {{ }}
}}

public class EntityViewsTextAreaInput : EntityViewsInput<Editor>
{{
    public EntityViewsTextAreaInput() : base(EntityViews.Attributes.InputTypes.TextArea) {{ }}
}}

public class EntityViewsNumberInput : EntityViewsInput<Entry>
{{
    public EntityViewsNumberInput() : base(EntityViews.Attributes.InputTypes.Number) {{ }}
}}

public class EntityViewsSwitchInput : EntityViewsInput<Switch>
{{
    public EntityViewsSwitchInput() : base(EntityViews.Attributes.InputTypes.Switch) {{ }}
}}

public class EntityViewsCheckBoxInput : EntityViewsInput<CheckBox>
{{
    public EntityViewsCheckBoxInput() : base(EntityViews.Attributes.InputTypes.Checkbox) {{ }}
}}

public class EntityViewsDatePickerInput : EntityViewsInput<DatePicker>
{{
    public EntityViewsDatePickerInput() : base(EntityViews.Attributes.InputTypes.DateTime) {{ }}
}}

public class EntityViewsTimePickerInput : EntityViewsInput<TimePicker>
{{
    public EntityViewsTimePickerInput() : base(EntityViews.Attributes.InputTypes.TimeSpan) {{ }}
}}

public class EntityViewsSliderInput : EntityViewsInput<Slider>
{{
    public EntityViewsSliderInput() : base(EntityViews.Attributes.InputTypes.Slider) {{ }}
}}

public class EntityViewsStepperInput : EntityViewsInput<Stepper>
{{
    public EntityViewsStepperInput() : base(EntityViews.Attributes.InputTypes.Stepper) {{ }}
}}
";
    }
}
