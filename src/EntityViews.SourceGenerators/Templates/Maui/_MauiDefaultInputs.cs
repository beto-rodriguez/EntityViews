namespace EntityViews.SourceGenerators.Templates.Maui;

public class _MauiDefaultInputs
{
    public static string OnErrorBackgroundColor = "Color.FromRgba(255, 0, 0, 50)";

    public static string Build()
    {
        return @$"// <auto-generated/>
#nullable enable

using Microsoft.Maui.Layouts;
using Microsoft.Maui.Handlers;
using EntityViews.Validation;

namespace EntityViews.Input;

/// <summary>
/// Defines a control for EntityViews.
/// </summary>
public interface IEntityViewsInput<T>
{{
    /// <summary>
    /// Gets the input to bind to the property value, if null, the input must be defined in the
    /// <see cref=""IEntityViewsInput{{T}}.Initialized""/> method.
    /// </summary>
    T? Input {{ get; }}

    /// <summary>
    /// Called when the input is initialized.
    /// </summary>
    void Initialized(string propertyName, string? displayName);

    /// <summary>
    /// Clears the validation error.
    /// </summary>
    void ClearValidationError();

    /// <summary>
    /// Displays a validation error.
    /// </summary>
    void DisplayValidationError(string message);
}}

// The interface implementation is irrelevant in this case,
// the source generator will use the properties defined in this interface,
// but it only uses the property names as strings.
public abstract class EntityViewsInput<TInput, THandler> : VerticalStackLayout, IEntityViewsInput<TInput>
    where TInput : View, new()
    where THandler : IViewHandler
{{
    private bool _isInitialized;
    private ValidableViewModel? _subscribedTo;
    protected bool _isFirstBinding = true;
    protected string _propertyName = string.Empty;
    protected Label _label;
    protected AbsoluteLayout _inputLayout;
    protected Border _inputBorder;
    protected Border _validationBorder;
    protected BoxView _activeBoxView;

    public EntityViewsInput()
    {{
        _isInitialized = true;

        _inputLayout = new AbsoluteLayout {{ MinimumHeightRequest = InputMinimumHeightRequest }};
        var ms = 7;

        _label = new Label {{ Opacity = 0.8, AnchorX = 0, Padding = new(ms + InputCornerRadius / 2f, 0) }};

        AbsoluteLayout.SetLayoutFlags(_label, AbsoluteLayoutFlags.PositionProportional);
        AbsoluteLayout.SetLayoutBounds(_label, new(0, 0.5, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));

        _inputBorder = new Border
        {{
            BackgroundColor = InputBackgroundColor,
            StrokeThickness = 0,
            Stroke = new SolidColorBrush(InputValidationErrorColor),
            StrokeShape = new Microsoft.Maui.Controls.Shapes.RoundRectangle
            {{
                CornerRadius = new(InputCornerRadius)
            }}
        }};

        AbsoluteLayout.SetLayoutFlags(_inputBorder, AbsoluteLayoutFlags.SizeProportional | AbsoluteLayoutFlags.PositionProportional);
        AbsoluteLayout.SetLayoutBounds(_inputBorder, new(0, 0, 1, 1));

        var input = new TInput {{ Margin = new(ms, 8, ms, 0) }};
        AbsoluteLayout.SetLayoutFlags(input, AbsoluteLayoutFlags.SizeProportional | AbsoluteLayoutFlags.PositionProportional);
        AbsoluteLayout.SetLayoutBounds(input, new(0, 1, 1, 1));

        _activeBoxView = new BoxView {{ BackgroundColor = HighlightColor, Margin = new(InputCornerRadius / 2f, 0) }};
        AbsoluteLayout.SetLayoutFlags(_activeBoxView, AbsoluteLayoutFlags.WidthProportional | AbsoluteLayoutFlags.PositionProportional);
        AbsoluteLayout.SetLayoutBounds(_activeBoxView, new(0.5f, 1, 0, HighlightBorderHeight));

        input.HandlerChanged += Input_HandlerChanged;

        _validationBorder = new Border
        {{
            Padding = new Thickness(ms + InputCornerRadius / 2f, 4),
            BackgroundColor = InputValidationErrorColor,
            StrokeThickness = 0,
            IsVisible = false,
            StrokeShape = new Microsoft.Maui.Controls.Shapes.RoundRectangle
            {{
                CornerRadius = new CornerRadius(0, 0, InputCornerRadius, InputCornerRadius)
            }},
            Content = new Label {{ TextColor = InputValidationLabelTextColor }}
        }};

        _inputLayout.Children.Add(_inputBorder);
        _inputLayout.Children.Add(_label);
        _inputLayout.Children.Add(input);
        _inputLayout.Children.Add(_activeBoxView);

        Children.Add(_inputLayout);
        Children.Add(_validationBorder);

        Input = input;

        Input.Focused += (_, _) => SetInputFocus();
        Input.Unfocused += (_, _) => RemoveInputFocus();

        BindingContextChanged += (_, _) => Subscribe();
        Subscribe();
    }}

    #region bindable properties

    public static readonly BindableProperty InputMinimumHeightRequestProperty =
     BindableProperty.Create(
         propertyName: nameof(InputMinimumHeightRequest), returnType: typeof(double),
         declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: 46d,
         propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
         {{
             var input = (EntityViewsInput<TInput, THandler>)bindable;
             if (!input._isInitialized) return;
             input._inputLayout.MinimumHeightRequest = (double)newValue;
         }});

    public static readonly BindableProperty InputCornerRadiusProperty =
        BindableProperty.Create(
            propertyName: nameof(InputCornerRadius), returnType: typeof(double),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: 20d,
            propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
            {{
                var input = (EntityViewsInput<TInput, THandler>)bindable;
                if (!input._isInitialized) return;

                var newRadius = (double)newValue;

                if (input._subscribedTo is not null &&
                    input._subscribedTo.ValidationErrors.TryGetValue(input._propertyName, out var message))
                {{
                    input.DisplayValidationError(message);
                }}
                else
                {{
                    input.ClearValidationError();
                }}

                input._validationBorder.StrokeShape = new Microsoft.Maui.Controls.Shapes.RoundRectangle
                {{
                    CornerRadius = new CornerRadius(0, 0, newRadius, newRadius)
                }};
            }});

    public static readonly BindableProperty InputBackgroundColorProperty =
        BindableProperty.Create(
            propertyName: nameof(InputBackgroundColor), returnType: typeof(Color),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: Color.FromRgba(240, 240, 240, 255),
            propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
            {{
                var input = (EntityViewsInput<TInput, THandler>)bindable;
                if (!input._isInitialized) return;

                input._inputBorder.BackgroundColor = (Color)newValue;
            }});

    public static readonly BindableProperty InputValidationErrorColorProperty =
        BindableProperty.Create(
            propertyName: nameof(InputValidationErrorColor), returnType: typeof(Color),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: Color.FromRgba(239, 68, 68, 255),
            propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
            {{
                var input = (EntityViewsInput<TInput, THandler>)bindable;
                if (!input._isInitialized) return;

                input._inputBorder.Stroke = new SolidColorBrush((Color)newValue);
                input._validationBorder.BackgroundColor = (Color)newValue;
            }});

    public static readonly BindableProperty InputValidationLabelTextColorProperty =
        BindableProperty.Create(
            propertyName: nameof(InputValidationLabelTextColor), returnType: typeof(Color),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: Color.FromRgba(255, 255, 255, 255),
            propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
            {{
                var input = (EntityViewsInput<TInput, THandler>)bindable;
                if (!input._isInitialized) return;

                var label = (Label)input._validationBorder.Content!;
                label.TextColor = (Color)newValue;
            }});

    public static readonly BindableProperty InputErrorBackgroundColorProperty =
        BindableProperty.Create(
            propertyName: nameof(InputBackgroundColor), returnType: typeof(Color),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: Color.FromRgba(239, 68, 68, 65));

    public static readonly BindableProperty LabelTextColorProperty =
        BindableProperty.Create(
            propertyName: nameof(LabelTextColor), returnType: typeof(Color),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: Color.FromRgba(0, 0, 0, 255),
            propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
            {{
                var input = (EntityViewsInput<TInput, THandler>)bindable;
                if (!input._isInitialized) return;

                input._label.TextColor = (Color)newValue;
            }});

    public static readonly BindableProperty LabelOpacityProperty =
        BindableProperty.Create(
            propertyName: nameof(LabelOpacity), returnType: typeof(double),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: 0.8d,
            propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
            {{
                var input = (EntityViewsInput<TInput, THandler>)bindable;
                if (!input._isInitialized) return;

                input._label.Opacity = (double)newValue;
            }});

    public static readonly BindableProperty HighlightColorProperty =
        BindableProperty.Create(
            propertyName: nameof(HighlightColor), returnType: typeof(Color),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: Color.FromRgba(59, 130, 246, 255),
            propertyChanged: (BindableObject bindable, object oldValue, object newValue) =>
            {{
                var input = (EntityViewsInput<TInput, THandler>)bindable;
                if (!input._isInitialized) return;

                input._activeBoxView.BackgroundColor = (Color)newValue;
            }});

    public static readonly BindableProperty HighlightBorderHeightProperty =
        BindableProperty.Create(
            propertyName: nameof(HighlightBorderHeight), returnType: typeof(double),
            declaringType: typeof(EntityViewsInput<TInput, THandler>), defaultValue: 3d);

    #endregion

    #region properties

    /// <summary>
    /// Gets the input control.
    /// </summary>
    public TInput Input {{ get; }}

    public double InputMinimumHeightRequest
    {{
        get {{ return (double)GetValue(InputMinimumHeightRequestProperty); }}
        set {{ SetValue(InputMinimumHeightRequestProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the corner radius of the input control.
    /// </summary>
    public double InputCornerRadius
    {{
        get {{ return (double)GetValue(InputCornerRadiusProperty); }}
        set {{ SetValue(InputCornerRadiusProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the background color of the input control.
    /// </summary>
    public Color InputBackgroundColor
    {{
        get {{ return (Color)GetValue(InputBackgroundColorProperty); }}
        set {{ SetValue(InputBackgroundColorProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the color of the input control when there is a validation error.
    /// </summary>
    public Color InputValidationErrorColor
    {{
        get {{ return (Color)GetValue(InputValidationErrorColorProperty); }}
        set {{ SetValue(InputValidationErrorColorProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the text color of the validation label.
    /// </summary>
    public Color InputValidationLabelTextColor
    {{
        get {{ return (Color)GetValue(InputValidationLabelTextColorProperty); }}
        set {{ SetValue(InputValidationLabelTextColorProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the background color of the input control when there is a validation error.
    /// </summary>
    public Color InputErrorBackgroundColor
    {{
        get {{ return (Color)GetValue(InputErrorBackgroundColorProperty); }}
        set {{ SetValue(InputErrorBackgroundColorProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the text color of the label.
    /// </summary>
    public Color LabelTextColor
    {{
        get {{ return (Color)GetValue(LabelTextColorProperty); }}
        set {{ SetValue(LabelTextColorProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the opacity of the label.
    /// </summary>
    public double LabelOpacity
    {{
        get {{ return (double)GetValue(LabelOpacityProperty); }}
        set {{ SetValue(LabelOpacityProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the color of to highlight the input.
    /// </summary>
    public Color HighlightColor
    {{
        get {{ return (Color)GetValue(HighlightColorProperty); }}
        set {{ SetValue(HighlightColorProperty, value); }}
    }}

    /// <summary>
    /// Gets or sets the height of the highlight.
    /// </summary>
    public double HighlightBorderHeight
    {{
        get {{ return (double)GetValue(HighlightBorderHeightProperty); }}
        set {{ SetValue(HighlightBorderHeightProperty, value); }}
    }}

    #endregion

    public virtual void Initialized(string propertyName, string? displayName)
    {{
        _propertyName = propertyName;
        _label.Text = displayName;
    }}

    public virtual void DisplayValidationError(string message)
    {{
        _inputBorder.StrokeThickness = 1;
        _inputBorder.StrokeShape = new Microsoft.Maui.Controls.Shapes.RoundRectangle
        {{
            CornerRadius = new(InputCornerRadius, InputCornerRadius, 0, 0)
        }};
        _inputBorder.BackgroundColor = InputErrorBackgroundColor;

        _validationBorder.IsVisible = true;
        var label = (Label)_validationBorder.Content!;
        label.Text = message;
    }}

    public virtual void ClearValidationError()
    {{
        _inputBorder.StrokeThickness = 0;
        _inputBorder.StrokeShape = new Microsoft.Maui.Controls.Shapes.RoundRectangle
        {{
            CornerRadius = new(InputCornerRadius)
        }};
        _inputBorder.BackgroundColor = InputBackgroundColor;

        _validationBorder.IsVisible = false;
    }}

    protected abstract bool CanRestoreLabelOnUnFocus {{ get; }}

    protected struct LabelTransform
    {{
        public Rect Bounds {{ get; set; }}
        public double Scale {{ get; set; }}
        public Thickness Margin {{ get; set; }}
    }}

    protected void Transform(
        bool canTransformLabel,
        LabelTransform labelTransform,
        bool canTransformBoxView,
        Rect boxViewBounds,
        uint length = 150)
    {{
        if (_label is null) return;

        var startLabelScale = _label.Scale;
        var startLabelBounds = AbsoluteLayout.GetLayoutBounds(_label);
        var startLabelMargin = _label.Margin;
        var startBoxViewBounds = AbsoluteLayout.GetLayoutBounds(_activeBoxView);

        var labelEndScale = labelTransform.Scale;
        var labelEndBounds = labelTransform.Bounds;
        var labelEndMargin = labelTransform.Margin;

        new Animation(
            t =>
            {{
                if (canTransformLabel)
                {{
                    _label.Scale = startLabelScale + t * (labelEndScale - startLabelScale);
                    _label.Margin = new(
                        startLabelMargin.Left + t * (labelEndMargin.Left - startLabelMargin.Left),
                        startLabelMargin.Top + t * (labelEndMargin.Top - startLabelMargin.Top),
                        startLabelMargin.Right + t * (labelEndMargin.Right - startLabelMargin.Right),
                        startLabelMargin.Bottom + t * (labelEndMargin.Bottom - startLabelMargin.Bottom));
                    AbsoluteLayout.SetLayoutBounds(
                        _label,
                        new Rect(
                            startLabelBounds.X + t * (labelEndBounds.X - startLabelBounds.X),
                            startLabelBounds.Y + t * (labelEndBounds.Y - startLabelBounds.Y),
                            startLabelBounds.Width + t * (labelEndBounds.Width - startLabelBounds.Width),
                            startLabelBounds.Height + t * (labelEndBounds.Height - startLabelBounds.Height)));
                }}

                if (canTransformBoxView)
                {{
                    AbsoluteLayout.SetLayoutBounds(
                        _activeBoxView,
                        new Rect(
                            startBoxViewBounds.X + t * (boxViewBounds.X - startBoxViewBounds.X),
                            startBoxViewBounds.Y + t * (boxViewBounds.Y - startBoxViewBounds.Y),
                            startBoxViewBounds.Width + t * (boxViewBounds.Width - startBoxViewBounds.Width),
                            startBoxViewBounds.Height + t * (boxViewBounds.Height - startBoxViewBounds.Height)));
                }}
            }}).Commit(this, ""Transform"", 16, length, Easing.CubicOut);
    }}

    protected virtual void OnValidating(
        ValidableViewModel vm,
        ValidatingEventArgs args)
    {{
        if (Input is null) return;
        if (args.PropertyName is not null && args.PropertyName != _propertyName) return;

        if (vm.ValidationErrors.TryGetValue(_propertyName, out var message))
            DisplayValidationError(message);
        else
            ClearValidationError();
    }}

    protected abstract void OnInputHandlerChanged(THandler handler);

    public virtual void SetInputFocus(uint speed = 150, bool? transformLabel = null, bool? transformViewBox = null)
    {{
        Transform(
            transformLabel ?? true,
            new LabelTransform
            {{
                Bounds = new(0, 0, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize),
                Scale = 0.7,
                Margin = new(5, 0)
            }},
            transformViewBox ?? true,
            new(0.5f, 1, 1, HighlightBorderHeight),
            speed);
    }}

    public virtual void RemoveInputFocus(uint speed = 150, bool? transformLabel = null, bool? transformViewBox = null)
    {{
        Transform(
            transformLabel ?? CanRestoreLabelOnUnFocus,
            new LabelTransform
            {{
                Bounds = new(0, 0.5, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize),
                Scale = 1,
                Margin = new(0),
            }},
            transformViewBox ?? true,
            new(0.5f, 1, 0, HighlightBorderHeight),
            speed);
    }}

    private void Subscribe()
    {{
        var vm = BindingContext as ValidableViewModel;

        var vmChanged = _subscribedTo != vm;
        if (!vmChanged) return;

        if (_subscribedTo is not null)
            _subscribedTo.Validating -= OnValidating;

        if (vm is not null)
            vm.Validating += OnValidating;

        _subscribedTo = vm;
        _isFirstBinding = true;
    }}

    private void Input_HandlerChanged(object? sender, EventArgs e)
    {{
        if (sender is not TInput input || input.Handler is null || input.Handler.PlatformView is null)
            return;

        OnInputHandlerChanged((THandler)input.Handler);
    }}
}}

public class EntityViewsDatePickerInput : EntityViewsInput<DatePicker, IDatePickerHandler>
{{
    public EntityViewsDatePickerInput()
    {{
        Input.BackgroundColor = Colors.Transparent;
    }}

    public override void Initialized(string propertyName, string? displayName)
    {{
        base.Initialized(propertyName, displayName);
        SetInputFocus(transformViewBox: false);
    }}

    protected override bool CanRestoreLabelOnUnFocus => false;

    protected override void OnInputHandlerChanged(IDatePickerHandler handler)
    {{
#if ANDROID
            handler.PlatformView.BackgroundTintList =
                Android.Content.Res.ColorStateList.ValueOf(
                    Microsoft.Maui.Controls.Compatibility.Platform.Android.ColorExtensions.ToAndroid(Colors.Transparent));
#elif IOS && !MACCATALYST
            handler.PlatformView.BorderStyle = UIKit.UITextBorderStyle.None;
#elif MACCATALYST
            // how?
#elif WINDOWS
            handler.PlatformView.BorderThickness = new Microsoft.UI.Xaml.Thickness(0);
            handler.PlatformView.Style = null;
#endif
    }}
}}

public class EntityViewsTextAreaInput : EntityViewsInput<Editor, IEditorHandler>
{{
    public EntityViewsTextAreaInput()
    {{
        _label.Margin = new(0, 14, 0, 0);
        AbsoluteLayout.SetLayoutBounds(_label, new(0, 0, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));
        InputMinimumHeightRequest = 120;

        Input.BackgroundColor = Colors.Transparent;
        Input.TextChanged += OnTextChanged;
        Input.Margin = new(7, 14, 7, 0);
    }}

    protected override bool CanRestoreLabelOnUnFocus => string.IsNullOrWhiteSpace(Input.Text);

    public override void SetInputFocus(uint speed = 150, bool? transformLabel = null, bool? transformViewBox = null)
    {{
        Transform(
            transformLabel ?? true,
            new LabelTransform
            {{
                Bounds = new(0, 0, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize),
                Scale = 0.7,
                Margin = new(5, 0)
            }},
            transformViewBox ?? true,
            new(0.5f, 1, 1, HighlightBorderHeight),
            speed);
    }}

    public override void RemoveInputFocus(uint speed = 150, bool? transformLabel = null, bool? transformViewBox = null)
    {{
        Transform(
            transformLabel ?? CanRestoreLabelOnUnFocus,
            new LabelTransform
            {{
                Bounds = new(0, 0, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize),
                Scale = 1,
                Margin = new(0, 14, 0, 0),
            }},
            transformViewBox ?? true,
            new(0.5f, 1, 0, HighlightBorderHeight),
            speed);
    }}

    protected override void OnInputHandlerChanged(IEditorHandler handler)
    {{
#if IOS17_0_OR_GREATER || MACCATALYST17_0_OR_GREATER
        handler.PlatformView.BorderStyle = UIKit.UITextViewBorderStyle.None;
#elif ANDROID
        handler.PlatformView.BackgroundTintList =
            Android.Content.Res.ColorStateList.ValueOf(
                Microsoft.Maui.Controls.Compatibility.Platform.Android.ColorExtensions.ToAndroid(Colors.Transparent));
#elif WINDOWS
        handler.PlatformView.BorderThickness = new Microsoft.UI.Xaml.Thickness(0);
        handler.PlatformView.Style = null;
#endif
    }}

    private async void OnTextChanged(object? sender, EventArgs e)
    {{
        if (_isFirstBinding)
        {{
            if (!string.IsNullOrWhiteSpace(Input.Text)) SetInputFocus(transformViewBox: false);
            _isFirstBinding = false;
        }}

        if (await UserKeepsTyping()) return;

        ((ValidableViewModel)BindingContext).ValidateDirtyProperty(
            _propertyName, Input.Text is not null && Input.Text.Length > 0);
    }}

    private async Task<bool> UserKeepsTyping()
    {{
        var txt = Input.Text;
        await Task.Delay(500);
        return txt != Input.Text;
    }}
}}

public class EntityViewsTextInput : EntityViewsInput<Entry, IEntryHandler>
{{
    public EntityViewsTextInput()
    {{
        Input.BackgroundColor = Colors.Transparent;
        Input.TextChanged += OnTextChanged;
    }}

    protected override bool CanRestoreLabelOnUnFocus => string.IsNullOrWhiteSpace(Input.Text);

    protected override void OnInputHandlerChanged(IEntryHandler handler)
    {{
#if IOS || MACCATALYST
        handler.PlatformView.BorderStyle = UIKit.UITextBorderStyle.None;
#elif ANDROID
        handler.PlatformView.BackgroundTintList =
            Android.Content.Res.ColorStateList.ValueOf(
                Microsoft.Maui.Controls.Compatibility.Platform.Android.ColorExtensions.ToAndroid(Colors.Transparent));
#elif WINDOWS
        handler.PlatformView.BorderThickness = new Microsoft.UI.Xaml.Thickness(0);
        handler.PlatformView.Style = null;
#endif
    }}

    private async void OnTextChanged(object? sender, EventArgs e)
    {{
        if (_isFirstBinding)
        {{
            if (!string.IsNullOrWhiteSpace(Input.Text)) SetInputFocus(transformViewBox: false);
            _isFirstBinding = false;
        }}

        if (await UserKeepsTyping()) return;

        ((ValidableViewModel)BindingContext).ValidateDirtyProperty(
            _propertyName, Input.Text is not null && Input.Text.Length > 0);
    }}

    private async Task<bool> UserKeepsTyping()
    {{
        var txt = Input.Text;
        await Task.Delay(500);
        return txt != Input.Text;
    }}
}}

public class EntityViewsNumberInput : EntityViewsTextInput
{{
    public EntityViewsNumberInput()
    {{
        Input.Keyboard = Keyboard.Numeric;
    }}
}}
";
    }
}
