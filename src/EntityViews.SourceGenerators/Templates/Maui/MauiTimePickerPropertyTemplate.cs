namespace EntityViews.SourceGenerators.Templates.Maui;

public class MauiTimePickerPropertyTemplate
{
    public static string Build(InputTemplateParams p)
    {
        var property = p.Property;
        var viewModelName = p.ViewModelName;
        var viewModelNamespace = p.ViewModelNamespace;
        var formNamespace = p.FormNamespace;
        var propertyDisplaySource = p.PropertyDisplaySource;

        return @$"// <auto-generated/>
#nullable enable

using CommunityToolkit.Maui.Markup;
using {viewModelNamespace};

namespace {formNamespace};

public class {property.Name}Input : {p.BaseControlClassName ?? "EntityViews.Input.EntityViewsTimePickerInput"}
{{
    public {property.Name}Input()
    {{
        if (Label is not null)
            Label.Text({propertyDisplaySource});

        if (Input is not null)
        {{
            Input
                .Bind(
                    TimePicker.TimeProperty,
                    getter: static ({viewModelName} vm) => vm.{property.Name},
                    setter: static ({viewModelName} vm, {property.Type.Name} value) => vm.{property.Name} = value);
            Input.Triggers.Add(
                new DataTrigger(typeof(TimePicker))
                {{
                    Binding = new Binding(""{property.Name}HasError""),
                    Value = true,
                    Setters = {{ new Setter {{ Property = BackgroundColorProperty, Value = {_MauiDefaultInputs.OnErrorBackgroundColor} }} }},
                }});
        }}

        if (ValidationLabel is not null)
            ValidationLabel
                .Bind(
                    Label.TextProperty,
                    getter: static ({viewModelName} vm) => vm.{property.Name}Error);

        Initialized(""{property.Name}"", {propertyDisplaySource});
    }}
}}
";
    }
}
