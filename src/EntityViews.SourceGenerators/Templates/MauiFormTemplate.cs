using System.ComponentModel.DataAnnotations;
using Microsoft.CodeAnalysis;

namespace EntityViews.SourceGenerators.Templates;

public class MauiFormTemplate
{
    public static string Build(
        Compilation compilation,
        string viewModelName,
        string viewModelNamespace,
        string formNamespace,
        IPropertySymbol property)
    {
        var displayAttribute = property
            .GetAttributes()
            .FirstOrDefault(x => x.AttributeClass?.ToDisplayString() == SyntaxNodeHelper.s_displayAnnotation);

        string? propertyDisplaySource = null;

        if (displayAttribute is null)
        {
            // if the display attribute is not present, we use the property name.
            propertyDisplaySource = @$"""{property.Name}""";
        }
        else
        {
            var name = displayAttribute.NamedArguments
                .FirstOrDefault(x => x.Key == nameof(DisplayAttribute.Name)).Value.Value;

            var resourceType = displayAttribute.NamedArguments
                .FirstOrDefault(x => x.Key == nameof(DisplayAttribute.ResourceType)).Value.Value;

            if (resourceType is null)
            {
                // if the ResourceType is null, we use a string literal.
                propertyDisplaySource = @$"""{(name is null ? null : (string)name) ?? property.Name}""";
            }
            else
            {
                // otherwise, we get it from the resource manager.
                var namedTypeSymbol = (INamedTypeSymbol)resourceType;
                propertyDisplaySource = @$"{namedTypeSymbol.ToDisplayString()}.ResourceManager.GetString(""{name}"")";
            }
        }

        return @$"// <auto-generated/>
#nullable enable

using CommunityToolkit.Maui.Markup;
using {viewModelNamespace};

namespace {formNamespace};

public class {property.Name}Input : StackLayout
{{
    public {property.Name}Input()
    {{
        var label = new Entry().Text({propertyDisplaySource});

        var entry = new Entry().Bind(Entry.TextProperty,
            getter: static ({viewModelName} vm) => vm.{property.Name},
            setter: static ({viewModelName} vm, {property.Type.Name} value) => vm.{property.Name} = value);
        entry.Triggers.Add(
            new DataTrigger(typeof(Entry))
            {{
                Binding = new Binding(""{property.Name}HasError""),
                Value = true,
                Setters = {{ new Setter {{ Property = BackgroundColorProperty, Value = Colors.Red }} }},
            }});

        var validationLabel = new Label().Bind(Label.TextProperty,
            getter: static ({viewModelName} vm) => vm.{property.Name}Error);

        Children.Add(label);
        Children.Add(entry);
        Children.Add(validationLabel);
    }}
}}
";
    }
}
