using System.ComponentModel.DataAnnotations;
using Microsoft.CodeAnalysis;

namespace EntityViews.SourceGenerators.Templates;

public class MauiFormTemplate
{
    public static string Build(
        Compilation compilation,
        string viewModelName,
        string viewModelNamespace,
        string formNamespace,
        IPropertySymbol property)
    {
        var displayAttribute = property
            .GetAttributes()
            .FirstOrDefault(x => x.AttributeClass?.ToDisplayString() == SyntaxNodeHelper.s_displayAnnotation)?
            .NamedArguments.FirstOrDefault(x => x.Key == nameof(DisplayAttribute.Name)).Value.Value;
        var displayAttributeString = displayAttribute is null ? null : (string)displayAttribute;

        var propertyDisplayName = displayAttributeString ?? property.Name;

        return @$"// <auto-generated/>
#nullable enable

using CommunityToolkit.Maui.Markup;
using {viewModelNamespace};

namespace {formNamespace};

public class {property.Name}Input : StackLayout
{{
    private Label _label = new();

    public {property.Name}Input()
    {{
        _label.Text(DisplayName ?? ""{propertyDisplayName}"");

        var entry = new Entry().Bind(Entry.TextProperty,
            getter: static ({viewModelName} vm) => vm.{property.Name},
            setter: static ({viewModelName} vm, {property.Type.Name} value) => vm.{property.Name} = value);
        entry.Triggers.Add(
            new DataTrigger(typeof(Entry))
            {{
                Binding = new Binding(""{property.Name}HasError""),
                Value = true,
                Setters = {{ new Setter {{ Property = BackgroundColorProperty, Value = Colors.Red }} }},
            }});

        var validationLabel = new Label().Bind(Label.TextProperty,
            getter: static ({viewModelName} vm) => vm.{property.Name}Error);

        Children.Add(_label);
        Children.Add(entry);
        Children.Add(validationLabel);
    }}

    public string? DisplayName {{ get => _label.Text; set => _label.Text = value; }}
}}
";
    }
}
