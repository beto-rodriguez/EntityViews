using EntityViews.SourceGenerators.Templates.Maui;
using Microsoft.CodeAnalysis;
namespace EntityViews.SourceGenerators.Templates;

public class MauiFormPropertyTemplate
{
    public static string Build(
        Compilation compilation,
        string viewModelName,
        string viewModelNamespace,
        string formNamespace,
        IPropertySymbol property,
        SyntaxNodeHelper.ViewModelAnalysis analysis)
    {
        _ = s_default_typeInput.TryGetValue(property.Type.Name.ToLower(), out var defaultInputKey);

        if (analysis.Inputs.TryGetValue(property.Name, out var inputType) && inputType != InputTypes.Default)
            defaultInputKey = inputType;

        if (defaultInputKey is null || !s_inputs.TryGetValue(defaultInputKey, out var inputTemplate))
        {
            return @$"// <auto-generated/>
// Unable to find a property template.

// Key:         {defaultInputKey}
// Property:    {property.Name}
// Type:        {property.Type.Name}
";
        }

        var templateParams = new InputTemplateParams(
            viewModelName, viewModelNamespace, formNamespace, property.GetPropertyDisplaySource(),
            property, SyntaxNodeHelper.ViewModelAnalysis.GetBaseClass(defaultInputKey));

        return inputTemplate(templateParams);
    }

    private static readonly Dictionary<string, Func<InputTemplateParams, string>> s_inputs = new()
    {
        [InputTypes.Text] = MauiEntryPropertyTemplate.Build,
        [InputTypes.TextArea] = MauiEditorPropertyTemplate.Build,
        [InputTypes.Number] = MauiNumericEntryPropertyTemplate.Build,
        [InputTypes.Switch] = MauiSwitchPropertyTemplate.Build,
        [InputTypes.Checkbox] = MauiCheckboxPropertyTemplate.Build,
        [InputTypes.DateTime] = MauiDatePickerPropertyTemplate.Build,
        [InputTypes.TimeSpan] = MauiTimePickerPropertyTemplate.Build,
        [InputTypes.Slider] = MauiSliderPropertyTemplate.Build,
        [InputTypes.Stepper] = MauiStepperPropertyTemplate.Build
    };

    private static readonly Dictionary<string, string> s_default_typeInput = new()
    {
        ["string"] = "text",
        ["short"] = "number",
        ["int16"] = "number",
        ["int"] = "number",
        ["int32"] = "number",
        ["long"] = "number",
        ["int64"] = "number",
        ["float"] = "number",
        ["single"] = "number",
        ["double"] = "number",
        ["decimal"] = "number",
        ["boolean"] = "checkbox",
        ["datetime"] = "datetime",
        ["timespan"] = "timespan",
    };
}
